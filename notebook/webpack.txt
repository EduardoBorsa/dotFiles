1) How tp configure Webpack 4 for a new Phoenix app?
	  - Follow these Steps:
				yarn remove babel-brunch brunch clean-css-brunch uglify-js-brunch
				rm brunch-config.js
				yarn add --dev webpack webpack-cli
				yarn add --dev babel-cli babel-core babel-loader babel-preset-es2015
		- Create  a .babelrc inside assets:
				nvim .babelrc
				{
					"presets": [["es2015", { "modules": false }]]
				}
		- update scripts inside packagejson:
				"deploy": "webpack --mode production",
				"start": "yarn run watch",
				"watch": "webpack --mode development --watch-stdin"
		- Create a webpack.config.js inside assets:
				nvim webpack.config.js
          // this has in the dudes stuff
          const path = require('path');
          // // We'll set up some paths for our generated files and our development server
          const staticDir = path.join(__dirname, '.');
          const destDir = path.join(__dirname, '../priv/static');
          const publicPath = '/';
          module.exports = function(env) {
            const production = process.env.NODE_ENV === 'production';
            return {
              devtool: production ? 'source-maps' : 'eval',
              // We have two entrypoints - the app.js file and our app.scss file
              // If it wasn't clear from that, we'll be using sass for our styles
              entry: [staticDir + '/js/app.js'],
              output: {
                path: destDir,
                filename: 'js/app.js',
                publicPath,
              },
              module: {
                rules: [
                  {
                    test: /\.js$/,
                    exclude: /node_modules/,
                    use: {
                      loader: 'babel-loader',
                    },
                  },
                ],
              },
              resolve: {
                modules: ['node_modules', path.resolve(__dirname, 'js')],
                extensions: ['.js'],
              },
            };
          };
		- Update the config/dev.exs
			watchers: [yarn: ["run", "watch", cd: Path.expand("../assets", __DIR__)]]
    - Add hot reloading
      yarn add --dev webpack-dev-server
      Update the watch script inside the package.json
      "watch": "webpack-dev-server --mode development --hot --watch-stdin"
      Update package.json last line with:
           devServer: {
              contentBase: staticDir;
            }
      then substitute in app.html.eex
        this -> <script src="<%= static_path(@conn, "/js/app.js") %>"></script>
        with this ->
                <%= if Mix.env == :dev do %>
                  <script src='http://localhost:8080/app.js'></script>
                <% else %>
                  <script src="<%= static_path(@conn, "/js/app.js") %>"></script>
                <% end %>

      - Add the mini-css-extract-plugin
        npm install --save-dev mini-css-extract-plugin
        change the webpack to:
          // this has in the dudes stuff
          const path = require('path');
          // // We'll set up some paths for our generated files and our development server
          const staticDir = path.join(__dirname, '.');
          const destDir = path.join(__dirname, '../priv/static');
          const publicPath = '/';

          const MiniCssExtractPlugin = require('mini-css-extract-plugin');

          module.exports = function(env) {
            const production = process.env.NODE_ENV === 'production';
            return {
              devtool: production ? 'source-maps' : 'eval',
              // We have two entrypoints - the app.js file and our app.scss file
              // If it wasn't clear from that, we'll be using sass for our styles
              entry: [staticDir + '/js/app.js'],
              output: {
                path: destDir,
                filename: 'js/app.js',
                publicPath,
              },
              module: {
                rules: [
                  {
                    test: /\.js$/,
                    exclude: /node_modules/,
                    use: {
                      loader: 'babel-loader',
                    },
                  },
                  {
                    test: /\.s?css$/,
                    use: [MiniCssExtractPlugin.loader, 'css-loader'],
                  },
                ],
              },
              resolve: {
                modules: ['node_modules', path.resolve(__dirname, 'js')],
                extensions: ['.js'],
              },
            };
          };
          devServer: {
            contentBase: staticDir;
          }
          plugins: [
            new MiniCssExtractPlugin({
              filename: 'css/app.css',
            }),
          ];
      Finalizing:
      yarn add --dev node-sass sass-loader
      mv assets/css/app.css to **/**/app.scss
      change the MiniCssExtractPlugin rule to:
              {
                  test: /\.(scss|css)$/,
                  use: [
                      MiniCssExtractPlugin.loader,
                      {
                          loader: "css-loader",
                          options: {
                              minimize: {
                                  safe: true
                              }
                          }
                      },
                      {
                          loader: "postcss-loader",
                          options: {
                              autoprefixer: {
                                  browsers: ["last 2 versions"]
                              },
                              plugins: () => [
                                  autoprefixer
                              ]
                          },
                      },
                      {
                          loader: "sass-loader",
                          options: {}
                      }
                  ]
              },
      yarn add --dev copy-webpack-plugin css-loader
      add:
      const CopyWebpackPlugin = require("copy-webpack-plugin");
      // We copy our images and fonts to the output folder
          new CopyWebpackPlugin([
            { from: "./static/images", to: "images" },
            { from: "./static/fonts", to: "fonts" }
          ])
      yarn add --dev file-loader
      then add to rules in webpack:
        {
          test: /\.(png)$/,
          loader: "file-loader?name=images/[name].[ext]"
        },
        // Any fonts we run into will be placed into the fonts directory
        {
          test: /\.(eot|svg|ttf|woff|woff2)$/,
          loader: "file-loader?name=fonts/[name].[ext]"
        },
        // If we load woff files we'll run them through the url-loader
        {
          test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
          loader: "url-loader?limit=10000&mimetype=application/font-woff"
        },
        // And any svg files will also go through the file loader
        {
          test: /\.(svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
          loader: "file-loader?name=images/[name].[ext]"
        }
      yarn add --dev style-loader url-loader
      yarn add --dev import-glob-loader
       add a rule inside the MiniCssExtractPlugin
       {
           loader: 'import-glob-loader',
           options: {},
       },
      yarn add --dev write-file-webpack-plugin
      yarn add --dev purecss normalize-scss typeplate-starter-kit
