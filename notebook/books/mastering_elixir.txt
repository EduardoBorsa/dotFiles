Chapter 2 - Innards of an Elixir Project

  2.1) Umbrela Applications

    mix new elixir_drip --module ElixirDrip.Umbrella --app elixir_drip_umbrella --umbrella

    to create new apps in an umbrela project, first be inside apps folder
    Looks like you can latter remove the umbrela project from is umbrela structure.

  credo <~ feedback on your code

  2.2) ElixirDrip - Our Showcase application

    Just show some roadmap of somethings that will come during the process of completing the book.

  2.3) Using Behaviours

    For new providers in the future, they will need to implement both upload/2 and download/1
    callbacks, i.e, respect the StorageProvider behaviour

  2.4) Vieweing cross references with xref

  End of chapter 2

Chapter 3 - The Bedrock of Concurrency and Fault Tolerance


  Detecting errors by linking and monitoring processes

Chapter 4 - Power by Erlang / OTP
  Summary - End of chapter
    How a Genserver works and how ca we use it to implement a CacheWorker process
    The Agent Behaviour and how it facilitates using a process to keep state
    Running Asyncronous and parallel tasks with the Taks module
    Efficiently storing and retriving data with the ETS end its disk-based version
    Naming processes with process register and using the registry introduced by Elixir 1.4

    4.1 - GenServer
      Why use GenServer?
        A: GenServer behaviour will take care of handling errors, keeping state, properly replying
        to synchronous calls or not replying at all to asynchronous ones, and so on, all of this while
        providing us the tranquility and peace of mind of serving our calculator functionality on top
        of battle-tested code that achieves nine "nines" of availability in production.

    4.1.1 - GenSerber At Your Service
      How it works?
      What is a CacheWorker process?

    4.1.3 - Agent
    4.1.3.1 - Parallel tasks

