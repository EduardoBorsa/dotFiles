------------------ELIXIR LIKE QUESTION ----
Summary:

     ----------- Debug  ------------
  #a1)  What does IO.inspect("string Value") works?
  #a14) what does IO.inspect("string Value")?
  #a5)  What does the @enforce_keys does?

    ---------- Database Stuff -----
  #a18) What does the @enforce_keys does?

    ---------- Mix Tasks -------
  #a19) What are some mix tasks?

    -----------Languages Data Types -----

  #a41) Whats a Map?

    ---------- Language Basics --------
  #a3)  How is the string concatenation in Elixir?
  #a6)  What are some mix tasks?
  #a7)  What is function arity?
  #a8)  What are guards in a function?
  #a9)  What does the Bang (!)  symbol means?
  #a4)  What is the the alias __MODULE__?
  #a20) What is function arity?
  #a36) How does cond works?
  #a37) how does case works?
  #a38) How to raise exceptions?
  #a39) What is an PID?
	#a42) Strict Operators:
	#a43) What are tail_call recursive functions and what are not?
	#a45) What is the observer from Erlang?
	#a44) How does Enum.Reduce works?
  #a52) How to get info about a funcion?
  #a51) Some Nice contents

    ---------- CONCURENCY ---------
  #a10) What does the --sup while creating a project does?
  #a12) What is child process
  #a13) What is a worker is elixir?
  #a2)  How to Spawn Processes in Elixir?
  #a11) What is an OTP supervision tree?
  #a26) What is a worker is elixir?
  #a27) How to start new workers?
  #a28) What are processes?
  #a30) What is OTP?
  #a35) What are OTP Behaviors?
  #a31) What is a GenServer Pattern?
  #a32) What is a Application Pattern?
  #a29) What is the Circuit breaker pattern?
  #a33) What are applications?
  #a34) What are casts?
  #a48) How do I link a procces to another?
  #a49) How do I register a process?

-------------- Start of Links --------



#a1) what does IO.inspect("string Value")?
  A: Prints the string value in the screen.

#a2) How to Spawn Processes in Elixir?
  spawn(ModuleName, :functionName, [parameters])

#a3) How is the string concatenation in Elixir?
  <>

#a4) What is the the alias __MODULE__?
  It alias the current module

#a5) What does the @enforce_keys does?
  To ensure that when we create a new struct, all attributes that
  are inside the enforce keys must be filled.
  i.e: @enforce_keys [:row,col]
       defstruct [:row, :col]

#a6) What are some mix tasks?
  mix docs - show docs

#a7) What is function arity?
  The nuber of arguments you can pass to the function.

#a8) What are guards in a function?
  They are special filters for the function match in a call.
  i.e: def (x, y) when is_number(x) and is_number(y), do: x+y
  The possible guards are:
  is_atom/1        is_binary/1     is_float/1    is_function/1
  is_list/1        is_map/1        is_pid/1      is_port/1
  is_bitstring/1   is_function/2   is_nil/1      is_reference/1
  is_boolean/1     is_integer/1    is_number/1   is_tuple/1


#a9) What does the Bang (!)  symbol means?
  Probably there is another function with the same name, but each of them handles erros ins a different manner.
  May raise a run time error.

#a10) What does the --sup while creating a project does?
  R: It creates a folder with the name of the project with an application.ex. Inside there is a start/2 function that contains a vector with children - that supose to be child processes - and this:
  opts = [strategy: :one_for_one, name: Tanto.Supervisor]
  Supervisor.start_link(children, opts)

#a11) What is an OTP supervision tree?

#a12) What is child process

#a13) What is a worker is elixir?

#a14) what does IO.inspect("string Value")?
  A: Prints the string value in the screen.


#a18) What does the @enforce_keys does?
  To ensure that when we create a new struct, all attributes that
  are inside the enforce keys must be filled.
  i.e: @enforce_keys [:row,col]
       defstruct [:row, :col]

#a19) What are some mix tasks?
  mix docs - show docs

#a20) What is function arity?
  The nuber of arguments you can pass to the function.


#a26) What is a worker is elixir?

#a27) How to start new workers?

#a28) What are processes?

#a29) What is the circuit breaker pattern?

#a30) What is OTP?
  Open Telecom Platform. It is a set of design patterns

#a31) What is a GenServer Pattern?
  What does it already sets for me?
    start_link/3 and start/3 functions that create new processes.

#a32) What is a Application Pattern?
  Takes care of the question? "Where ti divide a monolith into
  services?".
#a33) What are applications?
    Are supervised units of code that start and stops as a single
    entity.

#a34) What are casts?
    They are similar ti calls, but the don't return a specific
    reply; so the caller wont wait for one.

#a35) What are OTP Behaviors?
  Probably the name of the patterns.

#a36) How does cond works?
  cond do
    expression ->
      return statement
  end

#a37) how does case works?
  case someFunctionReturn do
    {expression, toBe, Matched} ->
      return statement
  end

#a38) How to raise exceptions?
  ------ Exemple 1 ----
  iex> raise RuntimeError
  ** (RuntimeError) runtime error
  iex> raise RuntimeError, message: "override message"
  ** (RuntimeError) override message
  ------ Exemple 2 ----
  case File.open(user_file_name) do
    {:ok, file} ->
    process(file)
    {:error, message} ->
    IO.puts :stderr, "Couldn't open #{user_file_name}: #{message}"
  end

#a39) What is an PID?
  A reference to a local or remote process.

#a40) What is a Port?
  A reference to a resource that will be written of or read.

#a41) Whats a Map?
  A map is a structure that initilizes with #, i.e: %{}
  Example 1 :
  states = %{ "AL" => "Alabama", "WI" => "Wisconsin" }
  iex> states["AL"]
  "Alabama"

#a42) Strict Operators:
 1 === 1.0 false
 1 !== 1.0 true
 1 == 1.0 true
 1 != 1.0 false

#a43) How Does the "With" expression works?
	looks like the Lets of elm, but insted of "let" "in" is "with" "do" "end"

#a43) What are tail_call recursive functions and what are not?
	NOT ----
	def factorial(0), do: 1
  def factorial(n), do: n * factorial(n-1)
	TAIL CALL-------
	def factorial(n),
  do: _fact(n, 1)
  defp _fact(0, acc), do: acc
  defp _fact(n, acc), do: _fact(n-1, acc*n)

#a44) How does Enum.Reduce works?

#a45) What is the observer from Erlang?
	i.e iex> :observer.start

#a46) Whats the purpose of using streams?

#a47) What does "self" does?
  Returns the PID of the current processes

#a48) How do I link a procces to another?
  spawn_link/1
  if a linked process crashed, all of them crash

#a49) How do I register a process?
  Process.register

#a50) What is the ETS? (Erlanf Term Storage)

#a51) Some Nice contents
  This book doesn’t provide a detailed reference on any of the language or
  platform features. That would take too much space, and the material would
  quickly become outdated. Here are some other references you can check out:
  For an alternative syntax quick start, you should look at the Getting Started
  guide on the Elixir official site:
  https://elixir-lang.org/getting-started/introduction.html .
  A more detailed reference can be found in the online documentation:
  https://hexdocs.pm/elixir .
  For specific questions, you can turn to Elixir forum ( https://elixirforum.com/ ),
  the #elixir-lang channel on IRC ( irc://irc.freenode.net/elixir-lang ), or the
  Slack channel ( https://elixir-slackin.herokuapp.com/ ).
  Finally, for many things, you’ll need to look into the Erlang documentation:
  http://www.erlang.org/doc . If you’re not familiar with Erlang syntax, you
  may also need to read Elixir’s crash course on Erlang (
  https://elixir-lang.org/crash-course.html ).

#a52) How to get info about a funcion?
  use the h commands, ie.:
